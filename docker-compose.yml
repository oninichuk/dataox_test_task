version: '3.9'

services:
  django_project:
    build:
       dockerfile: DockerfileDjango
    ports:
      - '8022:8000'
      - '3000:3000'
    depends_on:
      db:
        condition: service_healthy
      selenium:
        condition: service_started
      redis:
        condition: service_started
       
    volumes:
      - ./scraping_project:/code/scraping_project
    command: python manage.py runserver 0.0.0.0:8000
    #command: tail -f /dev/null 
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - COLLECT_PR_ARTICLES_TIME_LIMIT=${COLLECT_PR_ARTICLES_TIME_LIMIT}
      - ASYNC_REQUESTS_THREADS=${ASYNC_REQUESTS_THREADS}
      - PARSE_ARTICLE_THREADS=${PARSE_ARTICLE_THREADS}
      - ACTIVE_FETCH_COMMAND=${ACTIVE_FETCH_COMMAND}
    networks:
      - project_network

  db:
    build:
       dockerfile: DockerfilePostgreSQL
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER} -d $${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - unique_pgdata:/var/lib/postgresql/data
    networks:
      - project_network

  selenium:
      image: selenium/standalone-firefox
      container_name: selenium
      ports:
        - "4444:4444"
      shm_size: '2gb'
      networks:
        - project_network

  celery:
    build:
       dockerfile: DockerfileDjango
    command: celery -A main_app worker --loglevel=info
    volumes:
      - ./scraping_project:/code/scraping_project
    depends_on:
      - django_project
      - redis
    env_file:
      - .env

  celery-beat:
    build:
       dockerfile: DockerfileDjango
    command: celery -A main_app beat --loglevel=info
    volumes:
      - ./scraping_project:/code/scraping_project
    depends_on:
      - django_project
      - redis
    env_file:
      - .env

  redis:
    image: redis:7
    ports:
      - "6380:6379"
volumes:
  unique_pgdata:

networks:
  project_network:
    driver: bridge

